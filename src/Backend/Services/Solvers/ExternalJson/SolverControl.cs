/*
 * Copyright 2010-2015 Bastian Eicher
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser Public License for more details.
 *
 * You should have received a copy of the GNU Lesser Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

using System;
using System.Diagnostics;
using System.IO;
using JetBrains.Annotations;
using NanoByte.Common;
using NanoByte.Common.Cli;
using ZeroInstall.Services.Fetchers;
using ZeroInstall.Services.Injector;
using ZeroInstall.Store.Model;
using ZeroInstall.Store.Model.Selection;

namespace ZeroInstall.Services.Solvers.ExternalJson
{
    /// <summary>
    /// Interacts with the external process used by <see cref="ExternalJsonSolver"/>.
    /// </summary>
    internal class SolverControl : CliAppControl
    {
        #region Dependencies
        private readonly Selections _solverSelections;
        private readonly SelectionsManager _selectionsManager;
        private readonly IFetcher _fetcher;
        private readonly IExecutor _executor;

        /// <summary>
        /// Creates a new external JSON solver.
        /// </summary>
        /// <param name="solverSelections">The <see cref="Selections"/> generated by a backing <see cref="ISolver"/> used to get the external solver.</param>
        /// <param name="selectionsManager">Used to check whether the external solver is already in the cache.</param>
        /// <param name="fetcher">Used to download implementations of the external solver.</param>
        /// <param name="executor">Used to launch the external solver.</param>
        public SolverControl([NotNull] Selections solverSelections, [NotNull] SelectionsManager selectionsManager, [NotNull] IFetcher fetcher, [NotNull] IExecutor executor)
        {
            #region Sanity checks
            if (solverSelections == null) throw new ArgumentNullException("solverSelections");
            if (selectionsManager == null) throw new ArgumentNullException("selectionsManager");
            if (fetcher == null) throw new ArgumentNullException("fetcher");
            if (executor == null) throw new ArgumentNullException("executor");
            #endregion

            _solverSelections = solverSelections;
            _selectionsManager = selectionsManager;
            _fetcher = fetcher;
            _executor = executor;
        }
        #endregion

        /// <inheritdoc/>
        protected override string AppBinary { get { return "0install"; } }

        /// <inheritdoc/>
        protected override ProcessStartInfo GetStartInfo(string arguments, bool hidden = false)
        {
            var missing = _selectionsManager.GetUncachedImplementations(_solverSelections);
            _fetcher.Fetch(missing);

            var startInfo = _executor.GetStartInfo(_solverSelections, arguments);
            startInfo.CreateNoWindow = hidden;
            startInfo.RedirectStandardInput = true;
            startInfo.RedirectStandardOutput = true;
            startInfo.RedirectStandardError = true;

            return startInfo;
        }

        public void Start([NotNull] Requirements requirements)
        {
            Execute(requirements.ToCommandLineArgs().JoinEscapeArguments(), InputCallback);
        }

        private void InputCallback(StreamWriter obj)
        {
            throw new NotImplementedException();
        }
    }
}